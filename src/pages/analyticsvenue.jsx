import React from "react";
import { useLocation } from "react-router-dom";
import CountUp from "react-countup";
import { jsPDF } from "jspdf";

import VenuePerformanceCard from "../components/test/VenuePerformanceCard";
import { weakestVenues, strongestVenues, performanceStats } from "../components/test/AnalyticsData";
import Sidebar from "../components/sidebar";
import VenueTypeCard from "../components/test/VenueTypeCard";

import { FaUser, FaMapMarkerAlt, FaClipboardCheck, FaTimesCircle, FaDownload } from "react-icons/fa";

export default function VenueAnalyticsPage() {
  const location = useLocation();
  const data = location.state || {};

  const iconMap = {
    FaUser: <FaUser className="text-purple-500" />,
    FaMapMarkerAlt: <FaMapMarkerAlt className="text-yellow-400" />,
    FaClipboardCheck: <FaClipboardCheck className="text-green-500" />,
    FaTimesCircle: <FaTimesCircle className="text-red-500" />,
  };

  const handleDownloadReport = async () => {
    const doc = new jsPDF();

    doc.setFont("Helvetica", "bold");
    doc.setFontSize(20);
    doc.text("Venue Analytics Report", 105, 20, { align: "center" });

    doc.setFontSize(14);
    doc.setFont("Helvetica", "normal");
    doc.text("General Statistics:", 10, 40);

    data.forEach(({ title, value }, index) => {
      const y = 50 + index * 10;
      doc.text(`${title}:`, 20, y);
      doc.text(String(value), 100, y);
    });

    doc.text("Performance Insights:", 10, 90);
    performanceStats.forEach((stat, index) => {
      const y = 100 + index * 10;
      doc.text(`${stat.title}:`, 20, y);
      doc.text(String(stat.value), 100, y);
    });

    doc.text("Top Performing Venues:", 10, 140);
    strongestVenues.forEach((venue, index) => {
      const y = 150 + index * 10;
      doc.text(`${index + 1}. ${venue.title}`, 20, y);
    });

    doc.text("Lower Performing Venues:", 10, 180);
    weakestVenues.forEach((venue, index) => {
      const y = 190 + index * 10;
      doc.text(`${index + 1}. ${venue.title}`, 20, y);
    });

    doc.setFont("Helvetica", "italic");
    doc.setFontSize(10);
    doc.text("Generated by Venue Analytics Dashboard", 105, 290, { align: "center" });

    doc.save("venue_analytics_report.pdf");
  };



  return (
    <div className="flex">
      <Sidebar />
      <div className="min-h-screen bg-gray-50 p-8 w-full">
        <div className="flex justify-between items-center bg-gradient-to-r from-blue-600 to-indigo-700 p-6 rounded-lg shadow-lg text-white mb-8">
          <h1 className="text-4xl font-bold tracking-tight">Venue Analytics Dashboard</h1>
          <button
            className="flex items-center bg-white text-blue-600 px-4 py-2 rounded-lg shadow-md hover:shadow-xl hover:bg-blue-50 transition-all transform hover:scale-105 duration-300"
            onClick={handleDownloadReport}
          >
            <FaDownload className="w-5 h-5 mr-2" />
            Download Full Report
          </button>
        </div>

        <div className="grid grid-cols-4 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {data.map((card, index) => (
            <div
              key={index}
              className="flex items-center p-6 bg-white shadow-lg rounded-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2"
            >
              <div className="p-4 bg-gray-100 rounded-full text-3xl shadow-md">
                {iconMap[card.icon]}
              </div>
              <div className="ml-4">
                <h3 className="text-sm tex  t-gray-600">{card.title}</h3>
                <p className="text-4xl font-bold text-gray-800">
                  <CountUp end={card.value} duration={2} />
                </p>
              </div>
            </div>
          ))}
        </div>

        <div className="bg-white p-6 rounded-lg shadow-lg mb-8">
          <h2 className="text-2xl font-semibold text-gray-800 border-b-2 border-gray-200 pb-4 mb-6">
            Performance Insights
          </h2>
          <div className="grid grid-cols-3 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {performanceStats.map((stat, index) => (
              <VenuePerformanceCard key={index} {...stat} />
            ))}
          </div>
        </div>

        <div className="grid grid-cols-2 sm:grid-cols-2 gap-6">
          <div className="p-6 bg-green-50 rounded-lg shadow-md hover:shadow-lg transition-all duration-300">
            <h3 className="text-lg font-semibold text-green-600 mb-4">Top Performing Venues</h3>
            {strongestVenues.map((venue, index) => (
              <VenueTypeCard key={index} {...venue} isStrong />
            ))}
          </div>

          <div className="p-6 bg-red-50 rounded-lg shadow-md hover:shadow-lg transition-all duration-300">
            <h3 className="text-lg font-semibold text-red-600 mb-4">Lower Performing Venues</h3>
            {weakestVenues.map((venue, index) => (
              <VenueTypeCard key={index} {...venue} isStrong={false} />
            ))}
          </div>
        </div>

        <div className="mt-8 bg-yellow-50 p-6 rounded-lg shadow-md">
          <h2 className="text-2xl font-semibold text-yellow-700 mb-6">Admin Alerts</h2>
          <ul className="space-y-3">
            <li className="text-yellow-700">
              <strong>Upcoming High-Volume Periods:</strong> Holiday season bookings are filling up fast!
            </li>
            <li className="text-yellow-700">
              <strong>Low-Occupancy Warning:</strong> Outdoor venues are underutilized this quarter.
            </li>
          </ul>
        </div>
      </div>
    </div>
  );
}